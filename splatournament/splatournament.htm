<!doctype html>
<html ng-app="splatournament">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title ng-bind="title">splatournament</title>

    <!-- angular.js with ui.bootstrap -->
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-animate.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-touch.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular-sanitize.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.17/angular-ui-router.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/1.1.0/ui-bootstrap-tpls.min.js" rel="stylesheet"></script>
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" />

    <!-- onedrive -->
    <!--
    <script type="text/javascript" src="https://js.live.net/v5.0/OneDrive.js" id="onedrive-js" client-id="splatournament_public"></script>
    -->
    <!--  https://account.live.com/developers/applications -->

    <!-- d3.js -->
    <script src="http://mbostock.github.com/d3/d3.v2.js"></script>


    <style type="text/css">

        body,
        table,
        div,
        .node text {
            font-family: "Yu Gothic UI", "Meiryo UI", "メイリオ", "MS UI Gothic", sans-serif;
        }

        body {
            background-color:#EEEEEE;
        }
        .body {
            background-color:#FFFFFF;
            padding-bottom:24px;
        }

        .pull-xs-right {
            float:right;
        }
        .label-pill {
            padding-right: 0.6em;
            padding-left: 0.6em;
            border-radius: 10rem;
        }

        .node circle {
            cursor: pointer;
            fill: #fff;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
        .node text {
            font-size: 12px;
        }
        path.link {
            fill: none;
            stroke: #ccc;
            stroke-width: 1.5px;
        }
        path.red {
            stroke: #f88;
        }

        .footer .container ul {
            margin: 16px;
        }
        .footer .container ul li {
            list-style-type: none;
        }

    </style>

    <script type="text/javascript">
        // hand include from http://ngmodules.org/modules/Angular.uuid
        'use strict'
        angular.module('angularUUID2', []).factory('uuid2', [
            function () {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                        .toString(16)
                        .substring(1);
                }

                return {

                    newuuid: function () {
                        // http://www.ietf.org/rfc/rfc4122.txt
                        var s = [];
                        var hexDigits = "0123456789abcdef";
                        for (var i = 0; i < 36; i++) {
                            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
                        }
                        s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
                        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
                        s[8] = s[13] = s[18] = s[23] = "-";
                        return s.join("");
                    },
                    newguid: function () {
                        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                            s4() + '-' + s4() + s4() + s4();
                    }
                }

            }]);
    </script>
</head>
<body id="body" ng-controller="splatornament">
    <div class="body">
        <header class="navbar navbar-inverse navbar-static-top">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-3" ng-click="isCollapsed = !isCollapsed">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand visible-xs" href="#" ng-click="selectTab(null)">{{app.name}}</a>
                </div>
                <nav class="navbar-collapse collapse" uib-collapse="!isCollapsed">
                    <a href="#" role="button" class="navbar-brand" ng-click="selectTab()" ng-hide="isCollapsed">{{app.name}}</a>
                    <ul class="nav navbar-nav" ng-hide="is_loading">
                        <li ng-class="active_tab == tab ? 'active': ''" ng-repeat="tab in tabs track by $index"><a href="#{{tab}}" ng-click="selectTab(tab)">{{tab}}</a></li>
                    </ul>
                </nav>
            </div>
        </header>

        <div class="container theme-showcase" role="main">

            <div class="alert alert-danger" role="alert" ng-hide="true"><strong>JavaScriptが無効になっています。</strong>このページは JavaScript に強く依存しています。JavaScriptを有効にしてから再読み込みしてください。</div>
            <uib-alert ng-repeat="alert in alerts" type="{{alert.type}}" close="closeAlert($index)" dismiss-on-timeout="3000">{{alert.msg}}</uib-alert>

            <!--
        <div id="picker"></div>
        <br/>
        -->

            <div ng-show="is_loading">
                <div class="jumbotron">
                    <h1>loading...</h1>
                </div>
            </div>
            <div ng-hide="is_loading">
                <div ng-hide="active_tab">
                    <div class="jumbotron" ng-hide="viewmode">
                        <h1>splatournament</h1>
                        <p>
                            このツールは Wii U 用ゲームソフト、『スプラトゥーン』で草の根的に行われる
                            各種トーナメント形式での大会向けのトーナメント管理ツールです。
                        </p>
                    </div>
                    <div class="jumbotron" ng-show="viewmode">
                        <h1>{{model.event.name}}</h1>
                        <p>{{model.event.description}}</p>
                        <p><a ng-href="{{model.event.url}}" target="_blank">{{model.event.url}}</a></p>
                    </div>
                </div>

                <div ng-show="active_tab=='event'" ng-click="selectTab('event')">
                    <input type="text" class="form-control" ng-model="model.event.name" placeholder="名前">
                    <input type="text" class="form-control" ng-model="model.event.description" placeholder="説明">
                    <input type="text" class="form-control" ng-model="model.event.url" placeholder="URL">
                </div>

                <div ng-show="active_tab=='entry'">
                    <div ng-hide="selected.entry">
                        <ul class="list-group">
                            <li class="list-group-item list-group-item-success glyphicon glyphicon-plus" ng-click="addEntry()">チームの追加</li>
                            <li class="list-group-item" ng-class="{'active': entry == selected.entry}" ng-repeat="entry in model.entries track by $index" ng-click="selectEntry(entry)">
                                <span class="label label-default label-pill pull-xs-right" ng-repeat="tag in entry.tags track by tag">{{tag}}</span>
                                <h4 class="list-group-item-heading">{{entry.name}}<span ng-hide="entry.name"><i>名称未設定</i></span></h4>
                                <p class="list-group-item-text">{{entry.description}}</p>
                                <p class="list-group-item-text" ng-show="entry.url"><a ng-href="{{entry.url}}" target="_blank" ng-click="$event.stopPropagation()">{{entry.url}}</a></p>
                            </li>
                        </ul>
                    </div>
                    <div ng-show="selected.entry">
                        <input type="text" class="form-control" ng-model="selected.entry.name" placeholder="名前">
                        <input type="text" class="form-control" ng-model="selected.entry.description" placeholder="説明">
                        <input type="text" class="form-control" ng-model="selected.entry.url" placeholder="URL">
                        <button type="button" class='btn glyphicon glyphicon-chevron-left' ng-click="selectEntry(null)">戻る</button>
                        <button type="button" class='btn btn-danger glyphicon glyphicon-trash' ng-click="removeEntry(selected.entry)" style="float:right">チームの削除</button>
                    </div>
                </div>

                <div ng-show="active_tab=='match'">
                    <div ng-hide="1 < model.entries.length">
                        <uib-alert type="info">まずは entry から2チーム以上登録してください。</uib-alert>
                    </div>
                    <div ng-show="1 < model.entries.length">
                        <div ng-show="0 == model.matches.length">
                            <uib-alert type="info">トーナメントの抽選を行い試合を組み合わせ、試合表とトーナメントツリーを作成します。</uib-alert>
                            <uib-alert type="warning">現在の splatournament のバージョンではトーナメントツリー作成後に entry の追加/削除を行うと抽選のやり直しになります。</uib-alert>
                            <button type="button" class='btn btn-primary btn-lg btn-block' ng-click="makeMatch()">抽選の実行</button>
                        </div>
                        <div ng-show="0 < model.matches.length">
                            <div ng-show="0 < unmatches.length" style="margin-bottom:24px;">
                                <uib-alert type="info">次のチームがトーナメントに組み込まれていません。</uib-alert>
                                <ul class="list-group">
                                    <li class="list-group-item" ng-repeat="entry in unmatches track by $index">
                                        <span class="label label-default label-pill pull-xs-right" ng-repeat="tag in getEntry(entry).tags track by tag">{{tag}}</span>
                                        {{getEntry(entry).name}}<span ng-hide="getEntry(entry).name"><i>名称未設定</i></span>
                                    </li>
                                </ul>
                                <uib-alert type="denger">現在のトーナメントツリーのままで公平にエントリーを追加することができません。これらのエントリーをトーナメントに追加するには一度現在の抽選を全て破棄する必要があります。この画面の一番下にあるボタンをクリックしてください。</uib-alert>
                                <!--
                                <uib-alert ng-show="over_bit_level" type="denger">現在のトーナメントツリーのままで公平にエントリーを追加することができません。これらのエントリーをトーナメントに追加するには一度現在の抽選を全て破棄する必要があります。この画面の一番下にあるボタンをクリックしてください。</uib-alert>
                                <button ng-hide="over_bit_level" type="button" class='btn btn-primary btn-lg btn-block' ng-click="appendMatch()">追加の抽選の実行</button>
                            -->
                            </div>
                            <ul class="list-group">
                                <li class="list-group-item" ng-repeat="match in model.matches track by $index" ng-show="2<=match.entries.length">
                                    <span class="label label-default label-pill pull-xs-right" ng-repeat="tag in match.tags track by tag">{{tag}}</span>
                                    <h4 class="list-group-item-heading">{{match.name}}</h4>
                                    <ul class="list-group">
                                        <li class="list-group-item"
                                            ng-repeat="entry in match.entries track by $index"
                                            ng-click="setWinner(match,entry)"
                                            ng-class="getMatchEntryClass(match,entry)">
                                            <span ng-show="searchEntry(entry)">
                                                <span ng-class="getMatchResultClass(match,entry)"></span>
                                                <span class="label label-default label-pill pull-xs-right" ng-repeat="tag in searchEntry(entry).tags track by tag">{{tag}}</span>
                                                {{searchEntry(entry).name}}<span ng-hide="searchEntry(entry).name"><i>名称未設定</i></span>
                                            </span>
                                            <span ng-hide="searchEntry(entry)">
                                                <span class="label label-default label-pill pull-xs-right" ng-repeat="tag in getMatch(entry).tags track by tag">{{tag}}</span>
                                                <span class="label label-default label-pill pull-xs-right">weight:{{getMatch(entry).weight}}</span>
                                                <span class="label label-default label-pill pull-xs-right">level:{{getMatch(entry).level}}</span>
                                                {{getMatch(entry).name}} の勝者
                                            </span>
                                        </li>
                                    </ul>
                                    {{match.description}}
                                </li>
                            </ul>

                            <button type="button" class='btn btn-danger' style="float:right" ng-click="remakeMatch()">現在の抽選を全て破棄して抽選の再実行</button>
                        </div>
                    </div>
                </div>

                <div ng-show="active_tab=='import'">
                    <textarea class="form-control" rows="10" ng-model="json"></textarea>
                    <button type="button" class='btn btn-primary btn-lg btn-block' ng-click="import(json)">import</button>
                </div>

                <div ng-show="active_tab=='export'">
                    <textarea class="form-control" rows="10">{{toJson(model)}}</textarea>
                </div>

                <div ng-show="active_tab=='tree'">
                    <div ng-hide="0 < model.matches.length">
                        <uib-alert type="info">match で抽選を行ってトーナメント表を作成してください。</uib-alert>
                    </div>
                    <div id="chart"></div>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer">
        <div class="container">
            <ul>
                <li>splatournament ver {{app.version}}</li>
                <li>&copy; 2016 <a href="https://twitter.com/wraith13">@wraith13</a></li>
                <li><a href="https://github.com/wraith13/splatournament">github</a></li>
            </ul>
        </div>
    </footer>

    <script type="text/javascript">

        //window.onload = function () {
        //    var pickerOptions = {
        //        success: function(files) {
        //            // Handle returned file object(s)
        //            alert("You picked " + files.values[0].fileName);
        //        },
        //
        //        cancel: function() {
        //            // handle when the user cancels picking a file
        //        },
        //
        //        linkType: "webViewLink", // or "downloadLink",
        //        multiSelect: false // or true
        //    };
        //    var pickerButton = OneDrive.createOpenButton(pickerOptions);
        //    document.getElementById("picker").appendChild(pickerButton);
        //};

        var margin = { top: 30, right: 10, bottom: 10, left: 10 },
            //width = screen.width - margin.left - margin.right,
            width = 2700 - margin.left - margin.right,
            halfWidth = width / 2,
            height = 5000 - margin.top - margin.bottom,
            i = 0,
            duration = 500,
            root;

        var getChildren = function (d) {
            var a = [];
            if (d.entries) for (var i = 0; i < d.entries.length; i++) {
                d.entries[i].isRight = false;
                d.entries[i].parent = d;
                a.push(d.entries[i]);
            }
            return a.length ? a : null;
        };

        var tree = d3.layout.tree()
            .size([height, width]);

        var diagonal = d3.svg.diagonal()
            .projection(function (d) { return [d.y, d.x]; });
        var elbow = function (d, i) {
            var source = calcLeft(d.source);
            var target = calcLeft(d.target);
            var hy = (target.y - source.y) / 2;
            if (d.isRight) hy = -hy;
            return "M" + source.y + "," + source.x
                    + "H" + (source.y + hy)
                    + "V" + target.x + "H" + target.y;
        };
        var connector = elbow;

        var calcLeft = function (d) {
            var l = d.y;
            if (!d.isRight) {
                l = d.y - halfWidth;
                l = halfWidth - l;
            }
            return { x: d.x, y: l };
        };

        var vis = d3.select("#chart").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var update_tournament_tree = function (json) {
            root = json;
            root.x0 = height / 2;
            root.y0 = width / 2;

            var t1 = d3.layout.tree().size([height, halfWidth]).children(function (d) { return d.entries; });
            t1.nodes(root);

            var rebuildChildren = function (node) {
                node.children = getChildren(node);
                if (node.children) node.children.forEach(rebuildChildren);
            }
            rebuildChildren(root);
            root.isRight = false;
            update(root);
        }

        var toArray = function (item, arr) {
            arr = arr || [];
            var i = 0, l = item.children ? item.children.length : 0;
            arr.push(item);
            for (; i < l; i++) {
                toArray(item.children[i], arr);
            }
            return arr;
        };

        function update(source) {
            // Compute the new tree layout.
            var nodes = toArray(source);

            // Normalize for fixed-depth.
            nodes.forEach(function (d) { d.y = d.depth * 180 + halfWidth; });

            // Update the nodes…
            var node = vis.selectAll("g.node")
                .data(nodes, function (d) { return d.id || (d.id = ++i); });

            // Enter any new nodes at the parent's previous position.
            var nodeEnter = node.enter().append("g")
                .attr("class", "node")
                .attr("transform", function (d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                .on("click", click);

            nodeEnter.append("circle")
                .attr("r", 1e-6)
                .style("fill", function (d) { return d._children ? "lightsteelblue" : "#fff"; });

            nodeEnter.append("text")
                .attr("dy", function (d) { return d.isRight ? 14 : -8; })
                .attr("text-anchor", "middle")
                .text(function (d) { return d.name; })
                .style("fill-opacity", 1e-6);

            // Transition nodes to their new position.
            var nodeUpdate = node.transition()
                .duration(duration)
                .attr("transform", function (d) { p = calcLeft(d); return "translate(" + p.y + "," + p.x + ")"; });

            nodeUpdate.select("circle")
                .attr("r", 4.5)
                .style("fill", function (d) { return d._children ? "lightsteelblue" : "#fff"; });

            nodeUpdate.select("text")
                .style("fill-opacity", 1);

            // Transition exiting nodes to the parent's new position.
            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) { p = calcLeft(d.parent || source); return "translate(" + p.y + "," + p.x + ")"; })
                .remove();

            nodeExit.select("circle")
                .attr("r", 1e-6);

            nodeExit.select("text")
                .style("fill-opacity", 1e-6);

            // Update the links...
            var link = vis.selectAll("path.link")
                .data(tree.links(nodes), function (d) { return d.target.id; });

            // Enter any new links at the parent's previous position.
            link.enter().insert("path", "g")
                .attr("class", "link")
                //.attr("class", "link red")
                .attr("d", function (d) {
                    var o = { x: source.x0, y: source.y0 };
                    return connector({ source: o, target: o });
                });

            // Transition links to their new position.
            link.transition()
                .duration(duration)
                .attr("d", connector);

            // Transition exiting nodes to the parent's new position.
            link.exit().transition()
                .duration(duration)
                .attr("d", function (d) {
                    var o = calcLeft(d.source || source);
                    if (d.source.isRight) o.y -= halfWidth - (d.target.y - d.source.y);
                    else o.y += halfWidth - (d.target.y - d.source.y);
                    return connector({ source: o, target: o });
                })
                .remove();
            // Stash the old positions for transition.
            nodes.forEach(function (d) {
                var p = calcLeft(d);
                d.x0 = p.x;
                d.y0 = p.y;
            });

            // Toggle children on click.
            function click(d) {
                if (d.children) {
                    d._children = d.children;
                    d.children = null;
                } else {
                    d.children = d._children;
                    d._children = null;
                }
                update(source);
            }
        }
        //d3.json("bracket.json", update_tournament_tree);

        var app = angular.module("splatournament", ['ui.router', "ui.bootstrap", "angularUUID2"]);

        app.config(["$locationProvider", function ($locationProvider) {
            $locationProvider.html5Mode({
                enabled: true,
                requireBase: false
            });
        }]);

        //  http://stackoverflow.com/questions/17893708/angularjs-textarea-bind-to-json-object-shows-object-object
        app.directive('jsonText', function() {
            return {
                restrict: 'A', // only activate on element attribute
                require: 'ngModel', // get a hold of NgModelController
                link: function(scope, element, attrs, ngModelCtrl) {

                    var lastValid;

                    // push() if faster than unshift(), and avail. in IE8 and earlier (unshift isn't)
                    ngModelCtrl.$parsers.push(fromUser);
                    ngModelCtrl.$formatters.push(toUser);

                    // clear any invalid changes on blur
                    element.bind('blur', function() {
                        element.val(toUser(scope.$eval(attrs.ngModel)));
                    });

                    // $watch(attrs.ngModel) wouldn't work if this directive created a new scope;
                    // see http://stackoverflow.com/questions/14693052/watch-ngmodel-from-inside-directive-using-isolate-scope how to do it then
                    scope.$watch(attrs.ngModel, function(newValue, oldValue) {
                        lastValid = lastValid || newValue;

                        if (newValue != oldValue) {
                            ngModelCtrl.$setViewValue(toUser(newValue));

                            // TODO avoid this causing the focus of the input to be lost..
                            ngModelCtrl.$render();
                        }
                    }, true); // MUST use objectEquality (true) here, for some reason..

                    function fromUser(text) {
                        // Beware: trim() is not available in old browsers
                        if (!text || text.trim() === '') {
                            return {};
                        } else {
                            try {
                                lastValid = angular.fromJson(text);
                                ngModelCtrl.$setValidity('invalidJson', true);
                            } catch (e) {
                                ngModelCtrl.$setValidity('invalidJson', false);
                            }
                            return lastValid;
                        }
                    }

                    function toUser(object) {
                        // better than JSON.stringify(), because it formats + filters $$hashKey etc.
                        return angular.toJson(object, true);
                    }
                }
            };
        });

        app.controller("splatornament", function ($rootScope, $scope, $http, $location, $filter, uuid2) {

            //  http://stackoverflow.com/questions/20789373/shuffle-array-in-ng-repeat-angular
            $scope.shuffleArray = function (array) {
                var m = array.length, t, i;

                // While there remain elements to shuffle
                while (m) {
                    // Pick a remaining element…
                    i = Math.floor(Math.random() * m--);

                    // And swap it with the current element.
                    t = array[m];
                    array[m] = array[i];
                    array[i] = t;
                }

                return array;
            }

            //  http://stackoverflow.com/questions/23120077/how-to-get-the-indexof-an-object-within-an-angularjs-response-object-collection
            $scope.arrayObjectIndexOf = function (arr, obj) {
                for (var i = 0; i < arr.length; i++) {
                    if (angular.equals(arr[i], obj)) {
                        return i;
                    }
                };
                return -1;
            }

            $scope.alerts = [];
            $scope.addAlert = function (alert) {
                $scope.alerts.push(alert);
            };
            $scope.closeAlert = function (index) {
                $scope.alerts.splice(index, 1);
            };

            $scope.toJson = function (object) {
                return angular.toJson(object, true);
            };

            $scope.app = {
                name: "splatournament",
                version: "X.XX.XXX"
            };
            $rootScope.title = $scope.app.name;

            $http({
                method: 'GET',
                url: "version.json"
            }).success(function (data, status, headers, config) {
                $scope.app.version = data;
            }).error(function (data, status, headers, config) {
            });

            $scope.regulateModel = function () {
                $scope.model = $scope.model || {}
                $scope.model.event = $scope.model.event || {}
                $scope.makeSureId($scope.model.event);
                $scope.model.entries = $scope.model.entries || []
                $scope.model.matches = $scope.model.matches || []
                $scope.selected = {};
                $scope.cache = {};
            };

            var data_json = $location.search()["data"];
            if (data_json && 0 < data_json.length) {
                $scope.is_loading = true;
                $http({
                    method: 'GET',
                    url: data_json
                }).success(function (data, status, headers, config) {
                    $scope.model = data;
                    $scope.regulateModel();
                    $scope.viewmode = true;
                    $scope.tabs = ["entry", "match", "tree"];
                    $scope.selectTab($location.hash());
                    $rootScope.title = $scope.app.name = $scope.model.event.name;
                    $scope.is_loading = false;
                }).error(function (data, status, headers, config) {
                    $scope.addAlert({ type: 'danger', msg: 'インポート中にエラーが発生しました。 '});
                    $scope.is_loading = false;
                });
            }

            //$scope.change = function () {
            //};

            $scope.mastertabs = ["event", "entry", "match", "import", "export", "tree"];
            $scope.tabs = $scope.mastertabs;
            $scope.selectTab = function (tab) {
                $scope.isCollapsed = false;
                if (0 <= $scope.mastertabs.indexOf(tab)) {
                    $scope.active_tab = tab;
                } else {
                    $scope.active_tab = null;
                }
                if ("match" == $scope.active_tab) {
                    $scope.update_unmatches();
                }
                if ("tree" == $scope.active_tab) {
                    $scope.update_tree();
                }
            };
            setTimeout(function () {
                $scope.selectTab($location.hash());
            }, 0);

            //  cache
            $scope.getCache = function (type, key) {
                return ($scope.cache[type] || { })[key];
            }
            $scope.setCache = function (type, key, value) {
                $scope.cache[type] = $scope.cache[type] || {};
                $scope.cache[type][key] = value;
            }

            //  id
            $scope.makeSureId = function (object) {
                if (!object.id) {
                    object.id = uuid2.newuuid();
                }
                return object.id;
            };
            $scope.getEntry = function (id) {
                var result = $scope.getCache("entry", id);
                if (!result) {
                    angular.forEach($scope.model.entries, function (entry, i) {
                        if (id == entry.id) {
                            result = entry;
                            $scope.setCache("entry", id, entry);
                        }
                    });
                }
                return result;
            };
            $scope.getMatch = function (id) {
                var result = $scope.getCache("match", id);
                if (!result) {
                    angular.forEach($scope.model.matches, function (match, i) {
                        if (id == match.id) {
                            result = match;
                            $scope.setCache("match", id, match);
                        }
                    });
                }
                return result;
            };
            $scope.searchEntry = function (id) {
                var result = $scope.getCache("search_entry", id);
                if (!result) {
                    result = $scope.getEntry(id);
                    if (!result) {
                        var match = $scope.getMatch(id);
                        if (match) {
                            if (1 == match.entries.length) {
                                result = $scope.searchEntry(match.entries[0]);
                            } else if (match.winners && 1 == match.winners.length) {
                                result = $scope.searchEntry(match.winners[0]);
                            }
                        }
                    }
                    if (result) {
                        $scope.setCache("search_entry", id, result);
                    }
                }
                return result;
            };

            //  entry
            $scope.selectEntry = function (entry) {
                $scope.selected.entry = entry;
            }
            $scope.addEntry = function () {
                var entry = { tags: ["new", "4"] };
                $scope.model.entries.push(entry);
                $scope.selectEntry(entry);
            };
            $scope.removeEntry = function (entry) {
                var index = $scope.model.entries.indexOf(entry);
                $scope.model.entries.splice(index, 1);
                $scope.selectEntry(null);
            };

            //  match
            $scope.get_matched_entries = function () {
                var result = [];
                angular.forEach($scope.model.matches, function (match, i) {
                    angular.forEach(match.entries, function (entry, j) {
                        if (result.indexOf(entry) < 0) {
                            result.push(entry);
                        }
                    });
                });
                return result;
            };
            $scope.update_unmatches = function () {
                var matched_entries = $scope.get_matched_entries();

                $scope.unmatches = [];
                angular.forEach($scope.model.entries, function (entry, i) {
                    var entry_id = $scope.makeSureId(entry);
                    if (matched_entries.indexOf(entry_id) < 0) {
                        $scope.unmatches.push(entry_id);
                    }
                });

                var entries_count = $scope.model.entries.length;
                var matched_entries_count = entries_count - $scope.unmatches.length;
                $scope.over_bit_level = matched_entries_count < (entries_count & ~matched_entries_count);
            };
            $scope.regulateMatch = function () {
                var lastMatch = null;
                var display_count = 0;
                angular.forEach($scope.model.matches, function (match, i) {
                    if (2 <= match.entries.length) {
                        match.name = "第" + (++display_count) + "試合";
                        match.weight = 0;
                        match.level = 0;
                        angular.forEach(match.entries, function (entry, i) {
                            var subMatch = $scope.getMatch(entry);
                            if (subMatch) {
                                match.weight += subMatch.weight;
                                match.level = Math.max(match.level, subMatch.level);
                            } else {
                                match.weight += 1;
                            }
                        });
                        match.level += 1;
                        lastMatch = match;
                    } else {
                        match.weight = match.entries.length;
                        match.level = 0;
                    }
                });
                if (null != lastMatch) {
                    lastMatch.name = "決勝戦";
                    var number = 0;
                    angular.forEach(lastMatch.entries, function (match_id, i) {
                        var match = $scope.getMatch(match_id);
                        if (null != match) {
                            match.name = "準決勝 第" + (++number) + "試合";
                        }
                    });
                }
                $scope.update_unmatches();
            }
            $scope.makeMatch = function () {
                var shuffle_unmatches = $scope.shuffleArray(angular.fromJson(angular.toJson($scope.unmatches, true)));
                var entries_count = $scope.model.entries.length;
                var unmatched_match = [];
                var addMatch = function (entries) {
                    var match = {};
                    match.entries = entries;
                    $scope.model.matches.push(match);
                    unmatched_match.push(match);
                };

                //  level 0 マッチの生成
                while (($scope.model.matches.length * 2) < entries_count) {
                    do {
                        addMatch([shuffle_unmatches.shift()]);
                    } while ($scope.model.matches.length & ($scope.model.matches.length -1)); // 次の 2^n 境界の数までマッチを作成
                }

                //  level 1 マッチの生成
                var matched_entry_count = $scope.model.matches.length;
                var tournament_tree_capacity = $scope.model.matches.length * 2;
                var add_count = 0;
                var delta = 0.00001; // 浮動小数点演算誤差で最後の要素が追加されないことを防ぐ為の補正
                for (var i = 0; i < $scope.model.matches.length; ++i) {
                    if (add_count < (((i * (entries_count - matched_entry_count)) / (tournament_tree_capacity /2)) + delta)) {
                        ++add_count;
                        var entry = shuffle_unmatches.shift();
                        if (entry) {
                            $scope.model.matches[i].entries.push(entry);
                        } else {
                            console.log("【🐛バグ】shuffle_unmatches が足りない。計算があってない。");
                        }
                    }
                }
                if (0 < shuffle_unmatches.length) {
                    console.log("【🐛バグ】shuffle_unmatches が余った。計算があってない。");
                }

                //  level 2 以降のマッチの生成
                while (true) {
                    var match1 = unmatched_match.shift();
                    var match2 = unmatched_match.shift();
                    if (match1 && match2) {
                        addMatch([$scope.makeSureId(match1), $scope.makeSureId(match2)]);
                    } else {
                        break;
                    }
                }

                $scope.regulateMatch();
            };
            $scope.appendMatch = function () {
                console.log("【🐛バグ】ここはまだ実装中！！！💢💢💢");

                var entries_count = $scope.model.entries.length;
                var matched_entries_count = entries_count - $scope.unmatches.length;
                var over_bit_level = matched_entries_count < (entries_count & ~matched_entries_count);
                if (over_bit_level) {
                    // level を底上げする
                }
                var shuffle_unmatches = $scope.shuffleArray(angular.fromJson(angular.toJson($scope.unmatches, true)));

                //  level 1 マッチの生成
                var matched_entry_count = $scope.model.matches.length;
                var tournament_tree_capacity = $scope.model.matches.length * 2;
                var add_count = 0;
                var delta = 0.00001; // 浮動小数点演算誤差で最後の要素が追加されないことを防ぐ為の補正
                for (var i = 0; i < $scope.model.matches.length; ++i) {
                    if ($scope.model.matches[i].entries.length < 2) {
                        if (add_count < (((i * (entries_count - matched_entry_count)) / (tournament_tree_capacity / 2)) + delta)) {
                            ++add_count;
                            var entry = shuffle_unmatches.shift();
                            if (entry) {
                                $scope.model.matches[i].entries.push(entry);
                            } else {
                                console.log("【🐛バグ】shuffle_unmatches が足りない。計算があってない。");
                            }
                        }
                    }
                }
                if (0 < shuffle_unmatches.length) {
                    console.log("【🐛バグ】shuffle_unmatches が余った。計算があってない。");
                }

                $scope.regulateMatch();
            };
            $scope.remakeMatch = function () {
                $scope.cache = {};
                $scope.model.matches = [];
                $scope.update_unmatches();
                $scope.makeMatch();
            };
            $scope.setWinner = function (match, entry) {
                var winner = $scope.searchEntry(entry);
                if (match && winner) {
                    if (match.winners && 0 <= match.winners.indexOf(entry)) {
                        match.winners = [];
                    } else {
                        match.winners = [entry];
                    }
                }
                $scope.cache = {};
            }
            $scope.getMatchEntryClass = function (match, entry) {
                if ($scope.searchEntry(entry)) {
                    if (match.winners && 0 < match.winners.length) {
                        if (0 <= match.winners.indexOf(entry)) {
                            return 'list-group-item-success';
                        } else {
                            return 'list-group-item-danger';
                        }
                    } else {
                        return 'list-group-item-info';
                    }
                }
                return 'list-group-item-warning';
            }
            $scope.getMatchResultClass = function (match, entry) {
                if ($scope.searchEntry(entry)) {
                    if (match.winners && 0 < match.winners.length) {
                        if (0 <= match.winners.indexOf(entry)) {
                            return 'glyphicon glyphicon-ok';
                        } else {
                            return 'glyphicon glyphicon-remove';
                        }
                    }
                }
                return '';
            }

            $scope.import = function (text) {
                try {
                    $scope.model = angular.fromJson(text);
                    $scope.regulateModel();
                    $scope.addAlert({ type: 'success', msg: 'インポートしました。' });
                } catch (e) {
                    $scope.addAlert({ type: 'danger', msg: 'インポート中に例外が発生しました。 ' + e });
                }
            };

            $scope.update_tree = function () {
                var match_to_tree = function (match) {
                    var result = {
                        name: match.name,
                        entries: []
                    };
                    angular.forEach(match.entries, function (entry, i) {
                        var sub_match = $scope.getMatch(entry);
                        if (sub_match) {
                            result.entries.push(match_to_tree(sub_match));
                        } else {
                            result.entries.push({ name: $scope.getEntry(entry).name });
                        }
                    });
                    return result;
                };
                if ($scope.model.matches && 0 < $scope.model.matches.length) {
                    update_tournament_tree(match_to_tree($scope.model.matches[$scope.model.matches.length -1]));
                }
            };

            $scope.regulateModel();

            $scope.checkResults = [];

            $scope.$watchCollection('checkModel', function () {
                $scope.checkResults = [];
                angular.forEach($scope.checkModel, function (value, key) {
                    if (value) {
                        $scope.checkResults.push(key);
                    }
                });
            });
        });

    </script>
</body>
</html>